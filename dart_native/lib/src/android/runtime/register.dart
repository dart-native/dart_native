import 'dart:ffi';

typedef dynamic ConvertorJavaFromPointer(Pointer<Void> ptr);
Map<String, Convertor> _convertorCache = {};

/// Register native class name
/// and register a function for converting a Dart object from a [Pointer].
///
/// Example for [List]:
///
/// ```dart
/// registerJavaTypeConvertor('JList', 'java/util/List', (ptr) {
///     return JList.fromPointer(ptr);
/// });
/// ```
/// The example above can be generated by applying `@nativeWithClass` annotation on Dart
/// wrapper class.
void registerJavaTypeConvertor(
    String dartClass, String? javaClass, ConvertorJavaFromPointer convertor) {
  if (_convertorCache[dartClass] == null) {
    _convertorCache[dartClass] = Convertor(javaClass, convertor);
  }
}

/// Get register pointer convert.
/// if [_convertorCache] not contain this dartClass will return null.
ConvertorJavaFromPointer? getRegisterPointerConvertor(String dartClass) {
  return _convertorCache[dartClass]?.convertor;
}

/// Get register java class name.
/// if [_convertorCache] not contain this dartClass will return null.
String? getRegisterJavaClass(String dartClass) {
  return _convertorCache[dartClass]?.javaClass;
}

class Convertor {
  final String? javaClass;
  final ConvertorJavaFromPointer? convertor;
  Convertor(this.javaClass, this.convertor);
}
