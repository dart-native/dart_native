import 'dart:ffi';

import 'package:dart_native/dart_native.dart';

Map<String, Convertor> _convertorCache = {};

/// Register native class name
/// and register a function for converting a Dart object from a [Pointer].
///
/// Example for [List]:
///
/// ```dart
/// registerJavaTypeConvertor('JList', 'java/util/List', (ptr) {
///     return JList.fromPointer(ptr);
/// });
/// ```
/// The example above can be generated by applying `@nativeWithClass` annotation on Dart
/// wrapper class.
void registerJavaTypeConvertor(
    String dartClass, String? javaClass, ConvertorJavaFromPointer convertor) {
  if (_convertorCache[dartClass] == null) {
    _convertorCache[dartClass] = Convertor(javaClass, convertor);
  }
}

/// Get register pointer convert.
/// if [_convertorCache] not contain this dartClass will return null.
ConvertorJavaFromPointer? getRegisterPointerConvertor(String dartClass) {
  return _convertorCache[dartClass]?.convertor;
}

/// Get register java class name.
/// if [_convertorCache] not contain this dartClass will return null.
String? getRegisterJavaClass(String dartClass) {
  return _convertorCache[dartClass]?.javaClass;
}

String? getRegisterJavaClassSignature(String dartClass) {
  String? cls = _convertorCache[dartClass]?.javaClass;
  if (cls != null) {
    cls = 'L$cls;';
  }
  return cls;
}

class Convertor {
  final String? javaClass;
  final ConvertorJavaFromPointer convertor;
  Convertor(this.javaClass, this.convertor);
}

/// Convert pointer to dart wrapper object.
dynamic javaInstanceFromPointer(String? type, dynamic arg) {
  Pointer<Void> ptr;
  if (arg is JObject) {
    ptr = arg.pointer;
  } else if (arg is Pointer) {
    ptr = arg.cast<Void>();
  } else {
    return arg;
  }

  if (ptr == nullptr) {
    return arg;
  }
  JObject? templeObj;
  if (type == null) {
    templeObj = JObject.fromPointer(ptr);
    type = templeObj.className;
  }
  Convertor? convertor = _convertorCache[type];
  if (convertor != null) {
    return convertor.convertor(ptr);
  }
  if (templeObj != null) {
    return templeObj;
  }
  return JObject.fromPointer(ptr);
}
